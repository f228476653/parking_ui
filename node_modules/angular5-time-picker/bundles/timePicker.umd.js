(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material'), require('rxjs'), require('@angular/common'), require('@angular/flex-layout'), require('@angular/material/input'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/material', 'rxjs', '@angular/common', '@angular/flex-layout', '@angular/material/input', '@angular/forms'], factory) :
	(factory((global.ng = global.ng || {}, global.ng['time-picker'] = {}),global.ng.core,global.material,global.rxjs,global.common,global.flexLayout,global.input,global.forms));
}(this, (function (exports,core,material,rxjs,common,flexLayout,input,forms) { 'use strict';

// Current type to show
// Current type to show

// Current type to show
(function (CLOCK_TYPE) {
    CLOCK_TYPE[CLOCK_TYPE["HOURS"] = 1] = "HOURS";
    CLOCK_TYPE[CLOCK_TYPE["MINUTES"] = 2] = "MINUTES";
})(exports.CLOCK_TYPE || (exports.CLOCK_TYPE = {}));

var WClockComponent = /** @class */ (function () {
    function WClockComponent() {
        this.userTimeChange = new core.EventEmitter();
        this.viewChange = new core.EventEmitter();
        this.steps = new Array();
    }
    WClockComponent.prototype.ngOnChanges = function () {
        this.setupUI();
    };
    WClockComponent.prototype.setupUI = function () {
        this.steps = new Array();
        switch (this.currentView) {
            case exports.CLOCK_TYPE.HOURS:
                for (var i = 1; i <= this.userTime.format; i++) {
                    this.steps.push(i);
                    this.selectedTimePart = this.userTime.hour || 0;
                    if (this.selectedTimePart > this.userTime.format) {
                        this.selectedTimePart -= this.userTime.format;
                    }
                }
                break;
            case exports.CLOCK_TYPE.MINUTES:
                for (var i = 5; i <= 55; i += 5) {
                    this.steps.push(i);
                }
                this.steps.push(0);
                this.selectedTimePart = this.userTime.minute || 0;
                break;
        }
    };
    WClockComponent.prototype.getPointerStyle = function () {
        var divider = 1;
        switch (this.currentView) {
            case exports.CLOCK_TYPE.HOURS:
                divider = this.userTime.format;
                break;
            case exports.CLOCK_TYPE.MINUTES:
                divider = 60;
                break;
        }
        var degrees = 0;
        if (this.currentView === exports.CLOCK_TYPE.HOURS) {
            degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;
        }
        else {
            degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;
        }
        var style = {
            '-webkit-transform': 'rotate(' + degrees + 'deg)',
            '-ms-transform': 'rotate(' + degrees + 'deg)',
            'transform': 'rotate(' + degrees + 'deg)'
        };
        return style;
    };
    WClockComponent.prototype.getTimeValueClass = function (step, index) {
        if (this.currentView === exports.CLOCK_TYPE.HOURS) {
            this.STEP_DEG = 360 / this.userTime.format;
        }
        else {
            this.STEP_DEG = 360 / 12;
        }
        var classes = 'w-clock-step w-clock-deg' + (this.STEP_DEG * (index + 1));
        if (this.selectedTimePart === step) {
            classes += ' mat-primary';
        }
        return classes;
    };
    WClockComponent.prototype.changeTimeValue = function (step) {
        if (this.currentView === exports.CLOCK_TYPE.HOURS) {
            this.userTime.hour = step;
            // auto switch to minutes
            this.viewChange.emit(exports.CLOCK_TYPE.MINUTES);
        }
        else {
            this.userTime.minute = step;
            // auto switch to hours
            this.viewChange.emit(exports.CLOCK_TYPE.HOURS);
        }
        this.userTimeChange.emit(this.userTime);
    };
    WClockComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'w-clock',
                    template: "\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"w-clock-wrapper\">\n      <div class=\"w-clock\">\n        <div class=\"w-clock-container\">\n\n          <!-- Clock center -->\n          <button  mat-mini-fab [color]=\"color\" class=\"w-clock-center\"></button>\n\n          <!-- Clock hand -->\n          <mat-toolbar [ngStyle]=\"getPointerStyle()\" [color]=\"color\" class=\"w-pointer\">\n            <button mat-mini-fab [color]=\"color\" class=\"w-clock-selected\"></button>\n          </mat-toolbar>\n\n          <!-- Hour / Minute number faces -->\n          <div *ngFor=\"let step of steps; let i = index\" [class]=\"getTimeValueClass(step, i)\" >\n            <button mat-mini-fab\n                    [color]=\"selectedTimePart === step ? color : ''\"\n                    (click)=\"changeTimeValue(step)\">\n              {{ step }}\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>",
                    styles: ["\n    .w-clock-wrapper {\n      height: 100%;\n      padding: 0 24px;\n\n    }\n\n    .w-clock {\n      width: 200px;\n      height: 200px;\n      border-radius: 50%;\n      cursor: pointer;\n      padding: 24px;\n      background: #ededed;\n    }\n    .w-clock-container {\n      width: 100%;\n      height: 100%;\n      position: relative;\n      display: block;\n    }\n    .w-clock-center {\n      height: 6px;\n      width: 6px;\n      position: absolute;\n      left: 0;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      margin: auto;\n      border-radius: 50%;\n    }\n    .w-pointer {\n      box-shadow: none;\n      width: 1px;\n      height: 50%;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      margin: 0 auto;\n      padding: 0;\n      transform-origin: top center;\n      transition: transform 200ms;\n      z-index: 0;\n      pointer-events: none;\n    }\n    .w-clock-step {\n      display: block;\n      position: absolute;\n      transform: translate(-50%, -50%);\n      transition: transform 200ms;\n    }\n    .w-clock-step .mat-mini-fab {\n      box-shadow: none;\n      background-color: transparent;\n    }\n\n    .w-clock-selected {\n      position: absolute;\n      bottom: -19px;\n      left: -19px;\n      min-width: 0;\n      min-height: 0;\n      pointer-events: none;\n      box-shadow: none;\n      cursor: none;\n    }\n\n    .w-clock-deg0 {\n      top: 0%;\n      left: 50%;\n    }\n\n    .w-clock-deg15 {\n      top: 1.70370869%;\n      left: 62.94095226%;\n    }\n\n    .w-clock-deg30 {\n      top: 6.69872981%;\n      left: 75%;\n    }\n\n    .w-clock-deg45 {\n      top: 14.64466094%;\n      left: 85.35533905%;\n    }\n\n    .w-clock-deg60 {\n      top: 25%;\n      left: 93.30127019%;\n    }\n\n    .w-clock-deg75 {\n      top: 37.05904774%;\n      left: 98.29629131%;\n    }\n\n    .w-clock-deg90 {\n      top: 50%;\n      left: 100%;\n    }\n\n    .w-clock-deg105 {\n      top: 62.94095226%;\n      left: 98.29629131%;\n    }\n\n    .w-clock-deg120 {\n      top: 75%;\n      left: 93.30127019%;\n    }\n\n    .w-clock-deg135 {\n      top: 85.35533906%;\n      left: 85.35533906%;\n    }\n\n    .w-clock-deg150 {\n      top: 93.30127019%;\n      left: 75%;\n    }\n\n    .w-clock-deg165 {\n      top: 98.29629131%;\n      left: 62.94095226%;\n    }\n\n    .w-clock-deg180 {\n      top: 100%;\n      left: 50%;\n    }\n\n    .w-clock-deg195 {\n      top: 98.29629131%;\n      left: 37.05904774%;\n    }\n\n    .w-clock-deg210 {\n      top: 93.30127019%;\n      left: 25%;\n    }\n\n    .w-clock-deg225 {\n      top: 85.35533906%;\n      left: 14.64466094%;\n    }\n\n    .w-clock-deg240 {\n      top: 75%;\n      left: 6.69872981%;\n    }\n\n    .w-clock-deg255 {\n      top: 62.94095226%;\n      left: 1.703708686%;\n    }\n\n    .w-clock-deg270 {\n      top: 50%;\n      left: 0%;\n    }\n\n    .w-clock-deg285 {\n      top: 37.05904774%;\n      left: 1.703708686%;\n    }\n\n    .w-clock-deg300 {\n      top: 25%;\n      left: 6.69872981%;\n    }\n\n    .w-clock-deg315 {\n      top: 14.64466094%;\n      left: 14.64466094%;\n    }\n\n    .w-clock-deg330 {\n      top: 6.69872981%;\n      left: 25%;\n    }\n\n    .w-clock-deg345 {\n      top: 1.703708686%;\n      left: 37.05904774%;\n    }\n\n    .w-clock-deg360 {\n      top: 0%;\n      left: 50%;\n    }\n  "],
                },] },
    ];
    /** @nocollapse */
    WClockComponent.ctorParameters = function () { return []; };
    WClockComponent.propDecorators = {
        "userTime": [{ type: core.Input },],
        "userTimeChange": [{ type: core.Output },],
        "currentView": [{ type: core.Input },],
        "viewChange": [{ type: core.Output },],
        "color": [{ type: core.Input },],
    };
    return WClockComponent;
}());

var WTimeDialogComponent = /** @class */ (function () {
    function WTimeDialogComponent(
    //@Inject(MAT_DIALOG_DATA) private data: { time: ITime, color: string },
    data, color, dialogRef) {
        this.data = data;
        this.color = color;
        this.dialogRef = dialogRef;
        this.VIEW_HOURS = exports.CLOCK_TYPE.HOURS;
        this.VIEW_MINUTES = exports.CLOCK_TYPE.MINUTES;
        this.currentView = this.VIEW_HOURS;
        this.userTime = data.time;
        this.color = data.color;
        console.log('this.color', this.color);
    }
    WTimeDialogComponent.prototype.revert = function () {
        this.dialogRef.close(-1);
    };
    WTimeDialogComponent.prototype.submit = function () {
        this.dialogRef.close(this.userTime);
    };
    WTimeDialogComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'w-time-dialog',
                    template: "\n    <div mat-dialog-content class=\"w-timepicker-dialog\">\n      <w-time [color]=\"color\" [userTime]=\"userTime\" (onRevert)=\"revert()\" (onSubmit)=\"submit()\"></w-time>\n    </div>",
                    styles: ["\n    .w-timepicker-dialog {\n      padding: 0;\n      margin: -24px;\n      width: calc(100% + 48px);\n    }\n    "]
                },] },
    ];
    /** @nocollapse */
    WTimeDialogComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [material.MAT_DIALOG_DATA,] },] },
        { type: undefined, decorators: [{ type: core.Inject, args: [material.MAT_DIALOG_DATA,] },] },
        { type: material.MatDialogRef, },
    ]; };
    return WTimeDialogComponent;
}());

var WTimeComponent = /** @class */ (function () {
    function WTimeComponent() {
        this.userTimeChange = new core.EventEmitter();
        this.onRevert = new core.EventEmitter();
        this.onSubmit = new core.EventEmitter();
        this.VIEW_HOURS = exports.CLOCK_TYPE.HOURS;
        this.VIEW_MINUTES = exports.CLOCK_TYPE.MINUTES;
        this.currentView = this.VIEW_HOURS;
        /** Subscription to value changes in the associated input element. */
        this._inputSubscription = rxjs.Subscription.EMPTY;
    }
    WTimeComponent.prototype.ngOnInit = function () {
        if (!this.userTime) {
            this.userTime = {
                hour: 6,
                minute: 0,
                meriden: 'PM',
                format: 12
            };
        }
        if (!this.revertLabel) {
            this.revertLabel = 'Cancel';
        }
        if (!this.submitLabel) {
            this.submitLabel = 'OK';
        }
    };
    WTimeComponent.prototype.formatHour = function () {
        if (!this.userTime) {
            return '';
        }
        if (this.userTime.format === 24) {
            if (this.userTime.hour === 24) {
                return '00';
            }
            else if (this.userTime.hour < 10) {
                return '0' + String(this.userTime.hour);
            }
        }
        return String(this.userTime.hour);
    };
    WTimeComponent.prototype.formatMinute = function () {
        if (!this.userTime) {
            return '';
        }
        if (this.userTime.minute === 0) {
            return '00';
        }
        else if (this.userTime.minute < 10) {
            return '0' + String(this.userTime.minute);
        }
        else {
            return String(this.userTime.minute);
        }
    };
    WTimeComponent.prototype.setCurrentView = function (type) {
        this.currentView = type;
    };
    WTimeComponent.prototype.setMeridien = function (m) {
        this.userTime.meriden = m;
    };
    WTimeComponent.prototype.revert = function () {
        this.onRevert.emit();
    };
    WTimeComponent.prototype.submit = function () {
        this.onSubmit.emit(this.userTime);
    };
    WTimeComponent.prototype.emituserTimeChange = function (event) {
        this.userTimeChange.emit(this.userTime);
    };
    WTimeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'w-time',
                    template: "\n    <div fxLayout=\"column\" fxLayout.lt-md=\"column\" fxLayoutAlign=\"center center\" class=\"w-time\" [ngClass.xs]=\"'vertical-time'\" [ngClass.sm]=\"'vertical-time'\">\n      <mat-toolbar fxLayout=\"row\"  fxLayout.lt-md=\"row\" fxLayoutAlign=\"center center\" [color]=\"color\" class=\"w-timepicker-time-container\">\n\n        <div class=\"w-timepicker-selected-time\">\n          <span [class]=\"currentView === VIEW_HOURS ? 'active': ''\" (click)=\"setCurrentView(VIEW_HOURS)\">{{ formatHour() }}:</span>\n          <span [class]=\"currentView === VIEW_MINUTES ? 'active': ''\" (click)=\"setCurrentView(VIEW_MINUTES)\">{{ formatMinute() }}</span>\n        </div>\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"w-timepicker-selected-ampm\" *ngIf=\"userTime.format === 12\">\n          <span (click)=\"setMeridien('AM')\" [class]=\"userTime.meriden === 'AM' ? 'active' : ''\">AM</span>\n          <span (click)=\"setMeridien('PM')\" [class]=\"userTime.meriden === 'PM' ? 'active' : ''\">PM</span>\n        </div>\n\n      </mat-toolbar>\n\n      <div fxLayout=\"column\" fxLayoutAlign=\"space-between center\" class=\"w-time-content\">\n        <w-clock [color]=\"color\" class=\"w-animation-zoom\" [userTime]=\"userTime\" (userTimeChange)=\"emituserTimeChange($event)\" [(currentView)]=\"currentView\" (viewChange)=\"setCurrentView($event)\"></w-clock>\n\n        <div fxFlexAlign=\"end\">\n          <button mat-button (click)=\"revert()\">{{revertLabel}}</button>\n          <button mat-button [color]=\"color\" (click)=\"submit()\">{{submitLabel}}</button>\n        </div>\n      </div>\n    </div>\n  ",
                    styles: ["\n    :host {\n      display: block;\n    }\n\n    .w-time {\n      max-height: 100%;\n      min-height: 350px;\n      height: 450px;\n    }\n\n    .w-timepicker-time-container {\n      padding: 15px;\n      min-width: 160px;\n      width: 100%;\n    }\n\n    .w-timepicker-time-container.mat-toolbar-single-row  {\n      height: 120px;\n    }\n    .w-timepicker-selected-time {\n      font-size: 3.5rem;\n      font-weight: 400;\n      display: flex;\n    }\n    .w-timepicker-selected-ampm {\n      font-size: 1rem;\n      line-height: 1.3rem;\n      padding-top: 1rem;\n    }\n    .w-time-content {\n      width: 100%;\n      height: 100%;\n      padding: 6px;\n    }\n\n    w-clock {\n      padding: 0 0;\n      height: calc(100% - 58px);\n    }\n\n    .w-time.vertical-time {\n      height: auto;\n    }\n\n    .w-timepicker-selected-ampm {\n      padding: 8px 12px;\n    }\n\n    .w-timepicker-selected-time > span, .w-timepicker-selected-ampm > span {\n      outline: 0;\n      opacity: 0.5;\n    }\n\n    .w-timepicker-selected-time > span:not(.active), .w-timepicker-selected-ampm > span:not(.active) {\n      cursor: pointer;\n    }\n\n    .w-timepicker-selected-time > span.active, .w-timepicker-selected-ampm > span.active {\n      opacity: 1;\n    }\n\n    .w-animate-next {\n      opacity: 0;\n      -webkit-transform: translate3d(50%, 0, 1px);\n      transform: translate3d(50%, 0, 1px);\n    }\n\n    .w-animate-next-remove {\n      -webkit-transition: all 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n      transition: all 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n      opacity: 0;\n      -webkit-transform: translate3d(50%, 0, 1px);\n      transform: translate3d(50%, 0, 1px);\n    }\n\n    .w-animate-next-remove-active {\n      opacity: 1;\n      -webkit-transform: translate3d(0, 0, 1px);\n      transform: translate3d(0, 0, 1px);\n    }\n\n    .w-animate-prev {\n      opacity: 0;\n      -webkit-transform: translate3d(-50%, 0, 1px);\n      transform: translate3d(-50%, 0, 1px);\n    }\n\n    .w-animate-prev-remove {\n      -webkit-transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      opacity: 0;\n      -webkit-transform: translate3d(-50%, 0, 1px);\n      transform: translate3d(-50%, 0, 1px);\n    }\n\n    .w-animate-prev-remove-active {\n      opacity: 1;\n      -webkit-transform: translate3d(0, 0, 1px);\n      transform: translate3d(0, 0, 1px);\n    }\n\n    @-webkit-keyframes w-animation-bounce {\n      from {\n        opacity: 0;\n        -webkit-transform: scale(0.95);\n        transform: scale(0.95);\n      }\n\n      70% {\n        opacity: 1;\n        -webkit-transform: scale(1.05);\n        transform: scale(1.05);\n      }\n\n      to {\n        -webkit-transform: scale(1);\n        transform: scale(1);\n      }\n    }\n\n    @keyframes w-animation-bounce {\n      from {\n        opacity: 0;\n        -webkit-transform: scale(0.95);\n        transform: scale(0.95);\n      }\n\n      70% {\n        opacity: 1;\n        -webkit-transform: scale(1.05);\n        transform: scale(1.05);\n      }\n\n      to {\n        -webkit-transform: scale(1);\n        transform: scale(1);\n      }\n    }\n\n    .w-animation-zoom.ng-enter {\n      -webkit-transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      -webkit-animation-duration: 0.3s;\n      animation-duration: 0.3s;\n      -webkit-animation-name: w-animation-bounce;\n      animation-name: w-animation-bounce;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    WTimeComponent.ctorParameters = function () { return []; };
    WTimeComponent.propDecorators = {
        "userTime": [{ type: core.Input },],
        "userTimeChange": [{ type: core.Output },],
        "revertLabel": [{ type: core.Input },],
        "submitLabel": [{ type: core.Input },],
        "onRevert": [{ type: core.Output },],
        "onSubmit": [{ type: core.Output },],
        "color": [{ type: core.Input },],
    };
    return WTimeComponent;
}());

var WMatTimePickerComponent = /** @class */ (function () {
    function WMatTimePickerComponent(dialog) {
        this.dialog = dialog;
        this.userTimeChange = new core.EventEmitter();
    }
    WMatTimePickerComponent.prototype.ngOnInit = function () {
        if (!this.userTime) {
            this.userTime = {
                hour: 10,
                minute: 25,
                meriden: 'PM',
                format: 24
            };
        }
    };
    Object.defineProperty(WMatTimePickerComponent.prototype, "time", {
        get: function () {
            if (!this.userTime) {
                return '';
            }
            var meriden = "" + this.userTime.meriden;
            if (this.userTime.format === 24) {
                meriden = '';
            }
            var hour = "" + this.userTime.hour;
            if (this.userTime.hour === 24) {
                hour = '00';
            }
            if (this.userTime.minute === 0) {
                return hour + ":00 " + meriden;
            }
            else if (this.userTime.minute < 10) {
                var tt = '0' + String(this.userTime.minute);
                return hour + ":" + tt + " " + meriden;
            }
            else {
                return hour + ":" + this.userTime.minute + " " + meriden;
            }
        },
        enumerable: true,
        configurable: true
    });
    WMatTimePickerComponent.prototype.showPicker = function ($event) {
        var _this = this;
        var dialogRef = this.dialog.open(WTimeDialogComponent, {
            data: {
                time: {
                    hour: this.userTime.hour,
                    minute: this.userTime.minute,
                    meriden: this.userTime.meriden,
                    format: this.userTime.format
                },
                color: this.color
            }
        });
        dialogRef.afterClosed()
            .subscribe(function (result) {
            // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)
            // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)
            if (result === undefined) {
                return;
            }
            else if (result !== -1) {
                _this.userTime = result;
                _this.emituserTimeChange();
            }
        });
        return false;
    };
    WMatTimePickerComponent.prototype.emituserTimeChange = function () {
        this.userTimeChange.emit(this.userTime);
    };
    WMatTimePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'w-mat-timepicker',
                    styles: ["\n    .time-picker-button {\n      padding: 0;\n      margin: 0;\n      min-width: 44px;\n    }\n  "],
                    template: "\n    <div fxFlex fxLayout=\"row\" class=\"w-mat-timepicker\">\n\n      <mat-form-field fxFlex class=\"timeContainer\">\n        <input matInput\n               class=\"timeInput\"\n               placeholder=\"Select time\"\n               id=\"time_Control\"\n               name=\"time_Control\"\n               [value]=\"time\"\n        >\n        <button mat-button (click)=\"showPicker($event)\" class=\"time-picker-button\">\n          <mat-icon>access_time</mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    WMatTimePickerComponent.ctorParameters = function () { return [
        { type: material.MatDialog, },
    ]; };
    WMatTimePickerComponent.propDecorators = {
        "userTime": [{ type: core.Input },],
        "userTimeChange": [{ type: core.Output },],
        "color": [{ type: core.Input },],
        "timepicker": [{ type: core.Input, args: ['for',] },],
    };
    return WMatTimePickerComponent;
}());

var MatTimepickerComponent = /** @class */ (function () {
    function MatTimepickerComponent() {
        this.userTimeChange = new core.EventEmitter();
        this.onRevert = new core.EventEmitter();
        this.onSubmit = new core.EventEmitter();
        this.VIEW_HOURS = exports.CLOCK_TYPE.HOURS;
        this.VIEW_MINUTES = exports.CLOCK_TYPE.MINUTES;
        this.currentView = this.VIEW_HOURS;
        /** Subscription to value changes in the associated input element. */
        this._inputSubscription = rxjs.Subscription.EMPTY;
    }
    MatTimepickerComponent.prototype.ngOnInit = function () {
        if (!this.userTime) {
            // this.userTime = {
            //
            //   hour: 6,
            //   minute: 0,
            //   meriden: 'PM',
            //   format: 12
            // };
        }
        if (!this.revertLabel) {
            this.revertLabel = 'Cancel';
        }
        if (!this.submitLabel) {
            this.submitLabel = 'OK';
        }
    };
    MatTimepickerComponent.prototype.formatHour = function () {
        if (!this.userTime) {
            return '';
        }
        if (this.userTime.format === 24) {
            if (this.userTime.hour === 24) {
                return '00';
            }
            else if (this.userTime.hour < 10) {
                return '0' + String(this.userTime.hour);
            }
        }
        return String(this.userTime.hour);
    };
    MatTimepickerComponent.prototype.formatMinute = function () {
        if (!this.userTime) {
            return '';
        }
        if (this.userTime.minute === 0) {
            return '00';
        }
        else if (this.userTime.minute < 10) {
            return '0' + String(this.userTime.minute);
        }
        else {
            return String(this.userTime.minute);
        }
    };
    MatTimepickerComponent.prototype.setCurrentView = function (type) {
        this.currentView = type;
    };
    MatTimepickerComponent.prototype.setMeridien = function (m) {
        this.userTime.meriden = m;
    };
    MatTimepickerComponent.prototype.revert = function () {
        this.onRevert.emit();
    };
    MatTimepickerComponent.prototype.submit = function () {
        this.onSubmit.emit(this.userTime);
    };
    MatTimepickerComponent.prototype.emituserTimeChange = function (event) {
        this.userTimeChange.emit(this.userTime);
    };
    MatTimepickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mat-timepicker',
                    template: "",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MatTimepickerComponent.ctorParameters = function () { return []; };
    MatTimepickerComponent.propDecorators = {
        "userTime": [{ type: core.Input },],
        "userTimeChange": [{ type: core.Output },],
        "revertLabel": [{ type: core.Input },],
        "submitLabel": [{ type: core.Input },],
        "onRevert": [{ type: core.Output },],
        "onSubmit": [{ type: core.Output },],
        "color": [{ type: core.Input },],
    };
    return MatTimepickerComponent;
}());

var MatTimepickerToggleComponent = /** @class */ (function () {
    function MatTimepickerToggleComponent(dialog) {
        this.dialog = dialog;
        this.userTimeChange = new core.EventEmitter();
    }
    MatTimepickerToggleComponent.prototype.ngOnInit = function () {
        if (!this.userTime) {
            this.userTime = {
                hour: 10,
                minute: 25,
                meriden: 'PM',
                format: 24
            };
        }
    };
    Object.defineProperty(MatTimepickerToggleComponent.prototype, "time", {
        get: function () {
            if (!this.userTime) {
                return '';
            }
            var meriden = "" + this.userTime.meriden;
            if (this.userTime.format === 24) {
                meriden = '';
            }
            var hour = "" + this.userTime.hour;
            if (this.userTime.hour === 24) {
                hour = '00';
            }
            if (this.userTime.minute === 0) {
                return hour + ":00 " + meriden;
            }
            else if (this.userTime.minute < 10) {
                var tt = '0' + String(this.userTime.minute);
                return hour + ":" + tt + " " + meriden;
            }
            else {
                return hour + ":" + this.userTime.minute + " " + meriden;
            }
        },
        enumerable: true,
        configurable: true
    });
    MatTimepickerToggleComponent.prototype.showPicker = function ($event) {
        var _this = this;
        var dialogRef = this.dialog.open(WTimeDialogComponent, {
            data: {
                time: {
                    hour: this.timepicker.userTime ? this.timepicker.userTime.hour : 6,
                    minute: this.timepicker.userTime ? this.timepicker.userTime.minute : 0,
                    meriden: this.timepicker.userTime ? this.timepicker.userTime.meriden : 'PM',
                    format: this.timepicker.userTime ? this.timepicker.userTime.format : 12
                },
                color: this.timepicker.color
            }
        });
        dialogRef.afterClosed()
            .subscribe(function (result) {
            // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)
            // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)
            if (result === undefined) {
                return;
            }
            else if (result !== -1) {
                _this.timepicker.userTime = result;
                _this.emituserTimeChange();
            }
        });
        return false;
    };
    MatTimepickerToggleComponent.prototype.emituserTimeChange = function () {
        this.userTimeChange.emit(this.userTime);
    };
    MatTimepickerToggleComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mat-timepicker-toggle',
                    styles: ["\n    .time-picker-button {\n      padding: 0;\n      margin: 0;\n      min-width: 44px;\n    }\n  "],
                    template: "\n    <div fxFlex fxLayout=\"row\" class=\"w-mat-timepicker\">\n      <button mat-button (click)=\"showPicker($event)\" class=\"time-picker-button\">\n        <mat-icon>access_time</mat-icon>\n      </button>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    MatTimepickerToggleComponent.ctorParameters = function () { return [
        { type: material.MatDialog, },
    ]; };
    MatTimepickerToggleComponent.propDecorators = {
        "userTime": [{ type: core.Input },],
        "userTimeChange": [{ type: core.Output },],
        "color": [{ type: core.Input },],
        "timepicker": [{ type: core.Input, args: ['for',] },],
    };
    return MatTimepickerToggleComponent;
}());

var MAT_TIMEPICKER_VALUE_ACCESSOR = {
    provide: forms.NG_VALUE_ACCESSOR,
    useExisting: core.forwardRef(function () { return TimepickerDirective; }),
    multi: true
};
var MAT_TIMEPICKER_VALIDATORS = {
    provide: forms.NG_VALIDATORS,
    useExisting: core.forwardRef(function () { return TimepickerDirective; }),
    multi: true
};
var TimepickerDirective = /** @class */ (function () {
    function TimepickerDirective(_elementRef) {
        this._elementRef = _elementRef;
    }
    Object.defineProperty(TimepickerDirective.prototype, "value", {
        get: function () {
            if (this.timepicker) {
                if (!this.timepicker.userTime) {
                    this._elementRef.nativeElement.value = '';
                    return '';
                }
                var meriden = "" + this.timepicker.userTime.meriden;
                if (this.timepicker.userTime.format === 24) {
                    meriden = '';
                }
                var hour = "" + this.timepicker.userTime.hour;
                if (this.timepicker.userTime.hour === 24) {
                    hour = '00';
                }
                if (this.timepicker.userTime.minute === 0) {
                    this._elementRef.nativeElement.value = hour + ":00 " + meriden;
                    return hour + ":00 " + meriden;
                }
                else if (this.timepicker.userTime.minute < 10) {
                    var tt = '0' + String(this.timepicker.userTime.minute);
                    this._elementRef.nativeElement.value = hour + ":" + tt + " " + meriden;
                    return hour + ":" + tt + " " + meriden;
                }
                else {
                    this._elementRef.nativeElement.value = hour + ":" + this.timepicker.userTime.minute + " " + meriden;
                    return hour + ":" + this.timepicker.userTime.minute + " " + meriden;
                }
            }
            this._elementRef.nativeElement.value = '';
            return '';
        },
        enumerable: true,
        configurable: true
    });
    TimepickerDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: 'input[matTimepicker]',
                    providers: [
                        { provide: input.MAT_INPUT_VALUE_ACCESSOR, useExisting: TimepickerDirective },
                    ],
                    exportAs: 'matTimepickerInput',
                },] },
    ];
    /** @nocollapse */
    TimepickerDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    TimepickerDirective.propDecorators = {
        "timepicker": [{ type: core.Input, args: ['matTimepicker',] },],
        "value": [{ type: core.Input },],
    };
    return TimepickerDirective;
}());

var Angular5TimePickerModule = /** @class */ (function () {
    function Angular5TimePickerModule() {
    }
    Angular5TimePickerModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        WMatTimePickerComponent,
                        WTimeDialogComponent,
                        WClockComponent,
                        WTimeComponent,
                        MatTimepickerComponent,
                        MatTimepickerToggleComponent,
                        TimepickerDirective
                    ],
                    imports: [
                        material.MatButtonModule,
                        material.MatButtonToggleModule,
                        material.MatDialogModule,
                        material.MatFormFieldModule,
                        material.MatIconModule,
                        material.MatInputModule,
                        material.MatSelectModule,
                        material.MatToolbarModule,
                        common.CommonModule,
                        flexLayout.FlexLayoutModule,
                    ],
                    exports: [
                        WMatTimePickerComponent,
                        WTimeDialogComponent,
                        WClockComponent,
                        WTimeComponent,
                        MatTimepickerComponent,
                        MatTimepickerToggleComponent,
                        TimepickerDirective
                    ],
                    entryComponents: [
                        WMatTimePickerComponent,
                        WTimeDialogComponent,
                        WClockComponent,
                        WTimeComponent,
                        MatTimepickerComponent,
                        MatTimepickerToggleComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    Angular5TimePickerModule.ctorParameters = function () { return []; };
    return Angular5TimePickerModule;
}());

exports.Angular5TimePickerModule = Angular5TimePickerModule;
exports.TimepickerDirective = TimepickerDirective;
exports.WMatTimePickerComponent = WMatTimePickerComponent;
exports.WTimeDialogComponent = WTimeDialogComponent;
exports.WClockComponent = WClockComponent;
exports.WTimeComponent = WTimeComponent;
exports.MatTimepickerComponent = MatTimepickerComponent;
exports.MatTimepickerToggleComponent = MatTimepickerToggleComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
