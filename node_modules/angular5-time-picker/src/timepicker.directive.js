import { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';
import { Directive, ElementRef, forwardRef, Input, } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { WTimeComponent } from "./time-control/w-time/w-time.component";
export var MAT_TIMEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return TimepickerDirective; }),
    multi: true
};
export var MAT_TIMEPICKER_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return TimepickerDirective; }),
    multi: true
};
var MatTimepickerInputEvent = /** @class */ (function () {
    function MatTimepickerInputEvent(/** Reference to the timepicker input component that emitted the event. */ /** Reference to the timepicker input component that emitted the event. */
    target, /** Reference to the native input element associated with the timepicker input. */
    targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
    return MatTimepickerInputEvent;
}());
export { MatTimepickerInputEvent };
var TimepickerDirective = /** @class */ (function () {
    function TimepickerDirective(_elementRef) {
        this._elementRef = _elementRef;
    }
    Object.defineProperty(TimepickerDirective.prototype, "value", {
        get: function () {
            if (this.timepicker) {
                if (!this.timepicker.userTime) {
                    this._elementRef.nativeElement.value = '';
                    return '';
                }
                var meriden = "" + this.timepicker.userTime.meriden;
                if (this.timepicker.userTime.format === 24) {
                    meriden = '';
                }
                var hour = "" + this.timepicker.userTime.hour;
                if (this.timepicker.userTime.hour === 24) {
                    hour = '00';
                }
                if (this.timepicker.userTime.minute === 0) {
                    this._elementRef.nativeElement.value = hour + ":00 " + meriden;
                    return hour + ":00 " + meriden;
                }
                else if (this.timepicker.userTime.minute < 10) {
                    var tt = '0' + String(this.timepicker.userTime.minute);
                    this._elementRef.nativeElement.value = hour + ":" + tt + " " + meriden;
                    return hour + ":" + tt + " " + meriden;
                }
                else {
                    this._elementRef.nativeElement.value = hour + ":" + this.timepicker.userTime.minute + " " + meriden;
                    return hour + ":" + this.timepicker.userTime.minute + " " + meriden;
                }
            }
            this._elementRef.nativeElement.value = '';
            return '';
        },
        enumerable: true,
        configurable: true
    });
    TimepickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[matTimepicker]',
                    providers: [
                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: TimepickerDirective },
                    ],
                    exportAs: 'matTimepickerInput',
                },] },
    ];
    /** @nocollapse */
    TimepickerDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    TimepickerDirective.propDecorators = {
        "timepicker": [{ type: Input, args: ['matTimepicker',] },],
        "value": [{ type: Input },],
    };
    return TimepickerDirective;
}());
export { TimepickerDirective };
//# sourceMappingURL=timepicker.directive.js.map