import { Component, Input, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material';
import { WTimeDialogComponent } from '../w-time-dialog/w-time-dialog.component';
import { WTimeComponent } from "../w-time/w-time.component";
var MatTimepickerToggleComponent = /** @class */ (function () {
    function MatTimepickerToggleComponent(dialog) {
        this.dialog = dialog;
        this.userTimeChange = new EventEmitter();
    }
    MatTimepickerToggleComponent.prototype.ngOnInit = function () {
        if (!this.userTime) {
            this.userTime = {
                hour: 10,
                minute: 25,
                meriden: 'PM',
                format: 24
            };
        }
    };
    Object.defineProperty(MatTimepickerToggleComponent.prototype, "time", {
        get: function () {
            if (!this.userTime) {
                return '';
            }
            var meriden = "" + this.userTime.meriden;
            if (this.userTime.format === 24) {
                meriden = '';
            }
            var hour = "" + this.userTime.hour;
            if (this.userTime.hour === 24) {
                hour = '00';
            }
            if (this.userTime.minute === 0) {
                return hour + ":00 " + meriden;
            }
            else if (this.userTime.minute < 10) {
                var tt = '0' + String(this.userTime.minute);
                return hour + ":" + tt + " " + meriden;
            }
            else {
                return hour + ":" + this.userTime.minute + " " + meriden;
            }
        },
        enumerable: true,
        configurable: true
    });
    MatTimepickerToggleComponent.prototype.showPicker = function ($event) {
        var _this = this;
        var dialogRef = this.dialog.open(WTimeDialogComponent, {
            data: {
                time: {
                    hour: this.timepicker.userTime ? this.timepicker.userTime.hour : 6,
                    minute: this.timepicker.userTime ? this.timepicker.userTime.minute : 0,
                    meriden: this.timepicker.userTime ? this.timepicker.userTime.meriden : 'PM',
                    format: this.timepicker.userTime ? this.timepicker.userTime.format : 12
                },
                color: this.timepicker.color
            }
        });
        dialogRef.afterClosed()
            .subscribe(function (result) {
            // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)
            // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)
            if (result === undefined) {
                return;
            }
            else if (result !== -1) {
                _this.timepicker.userTime = result;
                _this.emituserTimeChange();
            }
        });
        return false;
    };
    MatTimepickerToggleComponent.prototype.emituserTimeChange = function () {
        this.userTimeChange.emit(this.userTime);
    };
    MatTimepickerToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mat-timepicker-toggle',
                    styles: ["\n    .time-picker-button {\n      padding: 0;\n      margin: 0;\n      min-width: 44px;\n    }\n  "],
                    template: "\n    <div fxFlex fxLayout=\"row\" class=\"w-mat-timepicker\">\n      <button mat-button (click)=\"showPicker($event)\" class=\"time-picker-button\">\n        <mat-icon>access_time</mat-icon>\n      </button>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    MatTimepickerToggleComponent.ctorParameters = function () { return [
        { type: MatDialog, },
    ]; };
    MatTimepickerToggleComponent.propDecorators = {
        "userTime": [{ type: Input },],
        "userTimeChange": [{ type: Output },],
        "color": [{ type: Input },],
        "timepicker": [{ type: Input, args: ['for',] },],
    };
    return MatTimepickerToggleComponent;
}());
export { MatTimepickerToggleComponent };
//# sourceMappingURL=mat-timepicker-toggle.component.js.map