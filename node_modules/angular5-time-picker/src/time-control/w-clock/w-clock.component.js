import { Component, Input, Output, EventEmitter } from '@angular/core';
// Current type to show
// Current type to show
export var CLOCK_TYPE;
// Current type to show
(function (CLOCK_TYPE) {
    CLOCK_TYPE[CLOCK_TYPE["HOURS"] = 1] = "HOURS";
    CLOCK_TYPE[CLOCK_TYPE["MINUTES"] = 2] = "MINUTES";
})(CLOCK_TYPE || (CLOCK_TYPE = {}));
;
var WClockComponent = /** @class */ (function () {
    function WClockComponent() {
        this.userTimeChange = new EventEmitter();
        this.viewChange = new EventEmitter();
        this.steps = new Array();
    }
    WClockComponent.prototype.ngOnChanges = function () {
        this.setupUI();
    };
    WClockComponent.prototype.setupUI = function () {
        this.steps = new Array();
        switch (this.currentView) {
            case CLOCK_TYPE.HOURS:
                for (var i = 1; i <= this.userTime.format; i++) {
                    this.steps.push(i);
                    this.selectedTimePart = this.userTime.hour || 0;
                    if (this.selectedTimePart > this.userTime.format) {
                        this.selectedTimePart -= this.userTime.format;
                    }
                }
                break;
            case CLOCK_TYPE.MINUTES:
                for (var i = 5; i <= 55; i += 5) {
                    this.steps.push(i);
                }
                this.steps.push(0);
                this.selectedTimePart = this.userTime.minute || 0;
                break;
        }
    };
    WClockComponent.prototype.getPointerStyle = function () {
        var divider = 1;
        switch (this.currentView) {
            case CLOCK_TYPE.HOURS:
                divider = this.userTime.format;
                break;
            case CLOCK_TYPE.MINUTES:
                divider = 60;
                break;
        }
        var degrees = 0;
        if (this.currentView === CLOCK_TYPE.HOURS) {
            degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;
        }
        else {
            degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;
        }
        var style = {
            '-webkit-transform': 'rotate(' + degrees + 'deg)',
            '-ms-transform': 'rotate(' + degrees + 'deg)',
            'transform': 'rotate(' + degrees + 'deg)'
        };
        return style;
    };
    WClockComponent.prototype.getTimeValueClass = function (step, index) {
        if (this.currentView === CLOCK_TYPE.HOURS) {
            this.STEP_DEG = 360 / this.userTime.format;
        }
        else {
            this.STEP_DEG = 360 / 12;
        }
        var classes = 'w-clock-step w-clock-deg' + (this.STEP_DEG * (index + 1));
        if (this.selectedTimePart === step) {
            classes += ' mat-primary';
        }
        return classes;
    };
    WClockComponent.prototype.changeTimeValue = function (step) {
        if (this.currentView === CLOCK_TYPE.HOURS) {
            this.userTime.hour = step;
            // auto switch to minutes
            this.viewChange.emit(CLOCK_TYPE.MINUTES);
        }
        else {
            this.userTime.minute = step;
            // auto switch to hours
            this.viewChange.emit(CLOCK_TYPE.HOURS);
        }
        this.userTimeChange.emit(this.userTime);
    };
    WClockComponent.decorators = [
        { type: Component, args: [{
                    selector: 'w-clock',
                    template: "\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"w-clock-wrapper\">\n      <div class=\"w-clock\">\n        <div class=\"w-clock-container\">\n\n          <!-- Clock center -->\n          <button  mat-mini-fab [color]=\"color\" class=\"w-clock-center\"></button>\n\n          <!-- Clock hand -->\n          <mat-toolbar [ngStyle]=\"getPointerStyle()\" [color]=\"color\" class=\"w-pointer\">\n            <button mat-mini-fab [color]=\"color\" class=\"w-clock-selected\"></button>\n          </mat-toolbar>\n\n          <!-- Hour / Minute number faces -->\n          <div *ngFor=\"let step of steps; let i = index\" [class]=\"getTimeValueClass(step, i)\" >\n            <button mat-mini-fab\n                    [color]=\"selectedTimePart === step ? color : ''\"\n                    (click)=\"changeTimeValue(step)\">\n              {{ step }}\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>",
                    styles: ["\n    .w-clock-wrapper {\n      height: 100%;\n      padding: 0 24px;\n\n    }\n\n    .w-clock {\n      width: 200px;\n      height: 200px;\n      border-radius: 50%;\n      cursor: pointer;\n      padding: 24px;\n      background: #ededed;\n    }\n    .w-clock-container {\n      width: 100%;\n      height: 100%;\n      position: relative;\n      display: block;\n    }\n    .w-clock-center {\n      height: 6px;\n      width: 6px;\n      position: absolute;\n      left: 0;\n      right: 0;\n      top: 0;\n      bottom: 0;\n      margin: auto;\n      border-radius: 50%;\n    }\n    .w-pointer {\n      box-shadow: none;\n      width: 1px;\n      height: 50%;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      margin: 0 auto;\n      padding: 0;\n      transform-origin: top center;\n      transition: transform 200ms;\n      z-index: 0;\n      pointer-events: none;\n    }\n    .w-clock-step {\n      display: block;\n      position: absolute;\n      transform: translate(-50%, -50%);\n      transition: transform 200ms;\n    }\n    .w-clock-step .mat-mini-fab {\n      box-shadow: none;\n      background-color: transparent;\n    }\n\n    .w-clock-selected {\n      position: absolute;\n      bottom: -19px;\n      left: -19px;\n      min-width: 0;\n      min-height: 0;\n      pointer-events: none;\n      box-shadow: none;\n      cursor: none;\n    }\n\n    .w-clock-deg0 {\n      top: 0%;\n      left: 50%;\n    }\n\n    .w-clock-deg15 {\n      top: 1.70370869%;\n      left: 62.94095226%;\n    }\n\n    .w-clock-deg30 {\n      top: 6.69872981%;\n      left: 75%;\n    }\n\n    .w-clock-deg45 {\n      top: 14.64466094%;\n      left: 85.35533905%;\n    }\n\n    .w-clock-deg60 {\n      top: 25%;\n      left: 93.30127019%;\n    }\n\n    .w-clock-deg75 {\n      top: 37.05904774%;\n      left: 98.29629131%;\n    }\n\n    .w-clock-deg90 {\n      top: 50%;\n      left: 100%;\n    }\n\n    .w-clock-deg105 {\n      top: 62.94095226%;\n      left: 98.29629131%;\n    }\n\n    .w-clock-deg120 {\n      top: 75%;\n      left: 93.30127019%;\n    }\n\n    .w-clock-deg135 {\n      top: 85.35533906%;\n      left: 85.35533906%;\n    }\n\n    .w-clock-deg150 {\n      top: 93.30127019%;\n      left: 75%;\n    }\n\n    .w-clock-deg165 {\n      top: 98.29629131%;\n      left: 62.94095226%;\n    }\n\n    .w-clock-deg180 {\n      top: 100%;\n      left: 50%;\n    }\n\n    .w-clock-deg195 {\n      top: 98.29629131%;\n      left: 37.05904774%;\n    }\n\n    .w-clock-deg210 {\n      top: 93.30127019%;\n      left: 25%;\n    }\n\n    .w-clock-deg225 {\n      top: 85.35533906%;\n      left: 14.64466094%;\n    }\n\n    .w-clock-deg240 {\n      top: 75%;\n      left: 6.69872981%;\n    }\n\n    .w-clock-deg255 {\n      top: 62.94095226%;\n      left: 1.703708686%;\n    }\n\n    .w-clock-deg270 {\n      top: 50%;\n      left: 0%;\n    }\n\n    .w-clock-deg285 {\n      top: 37.05904774%;\n      left: 1.703708686%;\n    }\n\n    .w-clock-deg300 {\n      top: 25%;\n      left: 6.69872981%;\n    }\n\n    .w-clock-deg315 {\n      top: 14.64466094%;\n      left: 14.64466094%;\n    }\n\n    .w-clock-deg330 {\n      top: 6.69872981%;\n      left: 25%;\n    }\n\n    .w-clock-deg345 {\n      top: 1.703708686%;\n      left: 37.05904774%;\n    }\n\n    .w-clock-deg360 {\n      top: 0%;\n      left: 50%;\n    }\n  "],
                },] },
    ];
    /** @nocollapse */
    WClockComponent.ctorParameters = function () { return []; };
    WClockComponent.propDecorators = {
        "userTime": [{ type: Input },],
        "userTimeChange": [{ type: Output },],
        "currentView": [{ type: Input },],
        "viewChange": [{ type: Output },],
        "color": [{ type: Input },],
    };
    return WClockComponent;
}());
export { WClockComponent };
//# sourceMappingURL=w-clock.component.js.map