import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CLOCK_TYPE } from '../w-clock/w-clock.component';
import { Subscription } from 'rxjs';
var WTimeComponent = /** @class */ (function () {
    function WTimeComponent() {
        this.userTimeChange = new EventEmitter();
        this.onRevert = new EventEmitter();
        this.onSubmit = new EventEmitter();
        this.VIEW_HOURS = CLOCK_TYPE.HOURS;
        this.VIEW_MINUTES = CLOCK_TYPE.MINUTES;
        this.currentView = this.VIEW_HOURS;
        /** Subscription to value changes in the associated input element. */
        this._inputSubscription = Subscription.EMPTY;
    }
    WTimeComponent.prototype.ngOnInit = function () {
        if (!this.userTime) {
            this.userTime = {
                hour: 6,
                minute: 0,
                meriden: 'PM',
                format: 12
            };
        }
        if (!this.revertLabel) {
            this.revertLabel = 'Cancel';
        }
        if (!this.submitLabel) {
            this.submitLabel = 'OK';
        }
    };
    WTimeComponent.prototype.formatHour = function () {
        if (!this.userTime) {
            return '';
        }
        if (this.userTime.format === 24) {
            if (this.userTime.hour === 24) {
                return '00';
            }
            else if (this.userTime.hour < 10) {
                return '0' + String(this.userTime.hour);
            }
        }
        return String(this.userTime.hour);
    };
    WTimeComponent.prototype.formatMinute = function () {
        if (!this.userTime) {
            return '';
        }
        if (this.userTime.minute === 0) {
            return '00';
        }
        else if (this.userTime.minute < 10) {
            return '0' + String(this.userTime.minute);
        }
        else {
            return String(this.userTime.minute);
        }
    };
    WTimeComponent.prototype.setCurrentView = function (type) {
        this.currentView = type;
    };
    WTimeComponent.prototype.setMeridien = function (m) {
        this.userTime.meriden = m;
    };
    WTimeComponent.prototype.revert = function () {
        this.onRevert.emit();
    };
    WTimeComponent.prototype.submit = function () {
        this.onSubmit.emit(this.userTime);
    };
    WTimeComponent.prototype.emituserTimeChange = function (event) {
        this.userTimeChange.emit(this.userTime);
    };
    WTimeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'w-time',
                    template: "\n    <div fxLayout=\"column\" fxLayout.lt-md=\"column\" fxLayoutAlign=\"center center\" class=\"w-time\" [ngClass.xs]=\"'vertical-time'\" [ngClass.sm]=\"'vertical-time'\">\n      <mat-toolbar fxLayout=\"row\"  fxLayout.lt-md=\"row\" fxLayoutAlign=\"center center\" [color]=\"color\" class=\"w-timepicker-time-container\">\n\n        <div class=\"w-timepicker-selected-time\">\n          <span [class]=\"currentView === VIEW_HOURS ? 'active': ''\" (click)=\"setCurrentView(VIEW_HOURS)\">{{ formatHour() }}:</span>\n          <span [class]=\"currentView === VIEW_MINUTES ? 'active': ''\" (click)=\"setCurrentView(VIEW_MINUTES)\">{{ formatMinute() }}</span>\n        </div>\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"w-timepicker-selected-ampm\" *ngIf=\"userTime.format === 12\">\n          <span (click)=\"setMeridien('AM')\" [class]=\"userTime.meriden === 'AM' ? 'active' : ''\">AM</span>\n          <span (click)=\"setMeridien('PM')\" [class]=\"userTime.meriden === 'PM' ? 'active' : ''\">PM</span>\n        </div>\n\n      </mat-toolbar>\n\n      <div fxLayout=\"column\" fxLayoutAlign=\"space-between center\" class=\"w-time-content\">\n        <w-clock [color]=\"color\" class=\"w-animation-zoom\" [userTime]=\"userTime\" (userTimeChange)=\"emituserTimeChange($event)\" [(currentView)]=\"currentView\" (viewChange)=\"setCurrentView($event)\"></w-clock>\n\n        <div fxFlexAlign=\"end\">\n          <button mat-button (click)=\"revert()\">{{revertLabel}}</button>\n          <button mat-button [color]=\"color\" (click)=\"submit()\">{{submitLabel}}</button>\n        </div>\n      </div>\n    </div>\n  ",
                    styles: ["\n    :host {\n      display: block;\n    }\n\n    .w-time {\n      max-height: 100%;\n      min-height: 350px;\n      height: 450px;\n    }\n\n    .w-timepicker-time-container {\n      padding: 15px;\n      min-width: 160px;\n      width: 100%;\n    }\n\n    .w-timepicker-time-container.mat-toolbar-single-row  {\n      height: 120px;\n    }\n    .w-timepicker-selected-time {\n      font-size: 3.5rem;\n      font-weight: 400;\n      display: flex;\n    }\n    .w-timepicker-selected-ampm {\n      font-size: 1rem;\n      line-height: 1.3rem;\n      padding-top: 1rem;\n    }\n    .w-time-content {\n      width: 100%;\n      height: 100%;\n      padding: 6px;\n    }\n\n    w-clock {\n      padding: 0 0;\n      height: calc(100% - 58px);\n    }\n\n    .w-time.vertical-time {\n      height: auto;\n    }\n\n    .w-timepicker-selected-ampm {\n      padding: 8px 12px;\n    }\n\n    .w-timepicker-selected-time > span, .w-timepicker-selected-ampm > span {\n      outline: 0;\n      opacity: 0.5;\n    }\n\n    .w-timepicker-selected-time > span:not(.active), .w-timepicker-selected-ampm > span:not(.active) {\n      cursor: pointer;\n    }\n\n    .w-timepicker-selected-time > span.active, .w-timepicker-selected-ampm > span.active {\n      opacity: 1;\n    }\n\n    .w-animate-next {\n      opacity: 0;\n      -webkit-transform: translate3d(50%, 0, 1px);\n      transform: translate3d(50%, 0, 1px);\n    }\n\n    .w-animate-next-remove {\n      -webkit-transition: all 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n      transition: all 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n      opacity: 0;\n      -webkit-transform: translate3d(50%, 0, 1px);\n      transform: translate3d(50%, 0, 1px);\n    }\n\n    .w-animate-next-remove-active {\n      opacity: 1;\n      -webkit-transform: translate3d(0, 0, 1px);\n      transform: translate3d(0, 0, 1px);\n    }\n\n    .w-animate-prev {\n      opacity: 0;\n      -webkit-transform: translate3d(-50%, 0, 1px);\n      transform: translate3d(-50%, 0, 1px);\n    }\n\n    .w-animate-prev-remove {\n      -webkit-transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      opacity: 0;\n      -webkit-transform: translate3d(-50%, 0, 1px);\n      transform: translate3d(-50%, 0, 1px);\n    }\n\n    .w-animate-prev-remove-active {\n      opacity: 1;\n      -webkit-transform: translate3d(0, 0, 1px);\n      transform: translate3d(0, 0, 1px);\n    }\n\n    @-webkit-keyframes w-animation-bounce {\n      from {\n        opacity: 0;\n        -webkit-transform: scale(0.95);\n        transform: scale(0.95);\n      }\n\n      70% {\n        opacity: 1;\n        -webkit-transform: scale(1.05);\n        transform: scale(1.05);\n      }\n\n      to {\n        -webkit-transform: scale(1);\n        transform: scale(1);\n      }\n    }\n\n    @keyframes w-animation-bounce {\n      from {\n        opacity: 0;\n        -webkit-transform: scale(0.95);\n        transform: scale(0.95);\n      }\n\n      70% {\n        opacity: 1;\n        -webkit-transform: scale(1.05);\n        transform: scale(1.05);\n      }\n\n      to {\n        -webkit-transform: scale(1);\n        transform: scale(1);\n      }\n    }\n\n    .w-animation-zoom.ng-enter {\n      -webkit-transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      transition: all 0.3s cubic-bezier(0.35, 0, 0.25, 1);\n      -webkit-animation-duration: 0.3s;\n      animation-duration: 0.3s;\n      -webkit-animation-name: w-animation-bounce;\n      animation-name: w-animation-bounce;\n    }\n  "]
                },] },
    ];
    /** @nocollapse */
    WTimeComponent.ctorParameters = function () { return []; };
    WTimeComponent.propDecorators = {
        "userTime": [{ type: Input },],
        "userTimeChange": [{ type: Output },],
        "revertLabel": [{ type: Input },],
        "submitLabel": [{ type: Input },],
        "onRevert": [{ type: Output },],
        "onSubmit": [{ type: Output },],
        "color": [{ type: Input },],
    };
    return WTimeComponent;
}());
export { WTimeComponent };
//# sourceMappingURL=w-time.component.js.map