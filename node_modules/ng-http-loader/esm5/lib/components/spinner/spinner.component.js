import { Component, Input } from '@angular/core';
import { merge, timer } from 'rxjs';
import { debounce } from 'rxjs/operators';
import { PendingInterceptorService } from '../../services/pending-interceptor.service';
import { SpinnerVisibilityService } from '../../services/spinner-visibility.service';
import { Spinkit } from '../../spinkits';
var SpinnerComponent = (function () {
    function SpinnerComponent(pendingInterceptorService, spinnerVisibilityService) {
        this.pendingInterceptorService = pendingInterceptorService;
        this.spinnerVisibilityService = spinnerVisibilityService;
        this.Spinkit = Spinkit;
        this.spinner = Spinkit.skCubeGrid;
        this.filteredUrlPatterns = [];
        this.debounceDelay = 0;
        this.entryComponent = null;
        this.subscriptions = merge(this.pendingInterceptorService.pendingRequestsStatus.pipe(debounce(this.handleDebounce.bind(this))), this.spinnerVisibilityService.visibilityObservable)
            .subscribe(this.handleSpinnerVisibility().bind(this));
    }
    SpinnerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.nullifySpinnerIfComponentOutletIsDefined();
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(function (e) {
                _this.pendingInterceptorService.filteredUrlPatterns.push(new RegExp(e));
            });
        }
    };
    SpinnerComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    SpinnerComponent.prototype.nullifySpinnerIfComponentOutletIsDefined = function () {
        if (null != this.entryComponent) {
            this.spinner = null;
        }
    };
    SpinnerComponent.prototype.handleSpinnerVisibility = function () {
        var _this = this;
        return function (v) { return _this.isSpinnerVisible = v; };
    };
    SpinnerComponent.prototype.handleDebounce = function (hasPendingRequests) {
        if (hasPendingRequests) {
            return timer(this.debounceDelay);
        }
        return timer(0);
    };
    SpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'spinner',
                    template: "<div id=\"spinner\" *ngIf=\"isSpinnerVisible\">\n\n    <ng-container *ngComponentOutlet=\"entryComponent\"></ng-container>\n\n    <sk-cube-grid\n        *ngIf=\"spinner === Spinkit.skCubeGrid\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-cube-grid>\n\n    <sk-chasing-dots\n        *ngIf=\"spinner === Spinkit.skChasingDots\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-chasing-dots>\n\n    <sk-double-bounce\n        *ngIf=\"spinner === Spinkit.skDoubleBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-double-bounce>\n\n    <sk-rotating-plane\n        *ngIf=\"spinner === Spinkit.skRotatingPlane\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-rotating-plane>\n\n    <sk-spinner-pulse\n        *ngIf=\"spinner === Spinkit.skSpinnerPulse\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-spinner-pulse>\n\n    <sk-three-bounce\n        *ngIf=\"spinner === Spinkit.skThreeBounce\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-three-bounce>\n\n    <sk-wandering-cubes\n        *ngIf=\"spinner === Spinkit.skWanderingCubes\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wandering-cubes>\n\n    <sk-wave\n        *ngIf=\"spinner === Spinkit.skWave\"\n        [backgroundColor]=\"backgroundColor\">\n    </sk-wave>\n\n</div>\n\n",
                    styles: ["#spinner{top:0;left:0;height:100%;width:100%;position:fixed;z-index:9999;opacity:.7;background-color:#f1f1f1;display:flex;align-items:center;justify-content:center}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}"]
                },] },
    ];
    SpinnerComponent.ctorParameters = function () { return [
        { type: PendingInterceptorService, },
        { type: SpinnerVisibilityService, },
    ]; };
    SpinnerComponent.propDecorators = {
        "backgroundColor": [{ type: Input },],
        "spinner": [{ type: Input },],
        "filteredUrlPatterns": [{ type: Input },],
        "debounceDelay": [{ type: Input },],
        "entryComponent": [{ type: Input },],
    };
    return SpinnerComponent;
}());
export { SpinnerComponent };
function SpinnerComponent_tsickle_Closure_declarations() {
    SpinnerComponent.decorators;
    SpinnerComponent.ctorParameters;
    SpinnerComponent.propDecorators;
    SpinnerComponent.prototype.isSpinnerVisible;
    SpinnerComponent.prototype.subscriptions;
    SpinnerComponent.prototype.Spinkit;
    SpinnerComponent.prototype.backgroundColor;
    SpinnerComponent.prototype.spinner;
    SpinnerComponent.prototype.filteredUrlPatterns;
    SpinnerComponent.prototype.debounceDelay;
    SpinnerComponent.prototype.entryComponent;
    SpinnerComponent.prototype.pendingInterceptorService;
    SpinnerComponent.prototype.spinnerVisibilityService;
}

//# sourceMappingURL=data:application/json;base64,