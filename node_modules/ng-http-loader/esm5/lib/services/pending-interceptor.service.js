import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject, throwError } from 'rxjs';
import { catchError, finalize, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
var PendingInterceptorService = (function () {
    function PendingInterceptorService() {
        this._pendingRequests = 0;
        this._pendingRequestsStatus = new ReplaySubject(1);
        this._filteredUrlPatterns = [];
    }
    Object.defineProperty(PendingInterceptorService.prototype, "pendingRequestsStatus", {
        get: function () {
            return this._pendingRequestsStatus.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "pendingRequests", {
        get: function () {
            return this._pendingRequests;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "filteredUrlPatterns", {
        get: function () {
            return this._filteredUrlPatterns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PendingInterceptorService.prototype, "forceByPass", {
        set: function (value) {
            this._forceByPass = value;
        },
        enumerable: true,
        configurable: true
    });
    PendingInterceptorService.prototype.shouldBypassUrl = function (url) {
        return this._filteredUrlPatterns.some(function (e) {
            return e.test(url);
        });
    };
    PendingInterceptorService.prototype.intercept = function (req, next) {
        var _this = this;
        var shouldBypass = this.shouldBypassUrl(req.urlWithParams) || this._forceByPass;
        if (!shouldBypass) {
            this._pendingRequests++;
            if (1 === this._pendingRequests) {
                this._pendingRequestsStatus.next(true);
            }
        }
        return next.handle(req).pipe(map(function (event) {
            return event;
        }), catchError(function (error) {
            return throwError(error);
        }), finalize(function () {
            if (!shouldBypass) {
                _this._pendingRequests--;
                if (0 === _this._pendingRequests) {
                    _this._pendingRequestsStatus.next(false);
                }
            }
        }));
    };
    PendingInterceptorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */ PendingInterceptorService.ngInjectableDef = i0.defineInjectable({ factory: function PendingInterceptorService_Factory() { return new PendingInterceptorService(); }, token: PendingInterceptorService, providedIn: "root" });
    return PendingInterceptorService;
}());
export { PendingInterceptorService };
function PendingInterceptorService_tsickle_Closure_declarations() {
    PendingInterceptorService.decorators;
    PendingInterceptorService.ctorParameters;
    PendingInterceptorService.prototype._pendingRequests;
    PendingInterceptorService.prototype._pendingRequestsStatus;
    PendingInterceptorService.prototype._filteredUrlPatterns;
    PendingInterceptorService.prototype._forceByPass;
}
export var PendingInterceptorServiceInterceptor = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: PendingInterceptorService,
        multi: true
    }];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctaHR0cC1sb2FkZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcGVuZGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0QsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRyxPQUFPLEVBQW9CLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztnQ0FNNUIsQ0FBQztzQ0FDNkIsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDO29DQUM3QyxFQUFFOztJQUczQyxzQkFBSSw0REFBcUI7YUFBekI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JEOzs7T0FBQTtJQUVELHNCQUFJLHNEQUFlO2FBQW5CO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUNoQzs7O09BQUE7SUFFRCxzQkFBSSwwREFBbUI7YUFBdkI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1NBQ3BDOzs7T0FBQTtJQUVELHNCQUFJLGtEQUFXO2FBQWYsVUFBZ0IsS0FBYztZQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztTQUM3Qjs7O09BQUE7SUFFTyxtREFBZSxhQUFDLEdBQVc7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3RCLENBQUMsQ0FBQzs7SUFHUCw2Q0FBUyxHQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtRQUFsRCxpQkE0QkM7UUEzQkcsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztRQUVsRixFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDaEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFFeEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUM7U0FDSjtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDeEIsR0FBRyxDQUFDLFVBQUEsS0FBSztZQUNMLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDaEIsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxVQUFBLEtBQUs7WUFDWixNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCLENBQUMsRUFDRixRQUFRLENBQUM7WUFDTCxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUV4QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztvQkFDOUIsS0FBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDM0M7YUFDSjtTQUNKLENBQUMsQ0FDTCxDQUFDO0tBQ0w7O2dCQTNESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7b0NBaEJEOztTQWlCYSx5QkFBeUI7Ozs7Ozs7OztBQTJEdEMsTUFBTSxDQUFDLElBQU0sb0NBQW9DLEdBQXVCLENBQUM7UUFDckUsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixXQUFXLEVBQUUseUJBQXlCO1FBQ3RDLEtBQUssRUFBRSxJQUFJO0tBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBFeGlzdGluZ1Byb3ZpZGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBmaW5hbGl6ZSwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBlbmRpbmdJbnRlcmNlcHRvclNlcnZpY2UgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICAgIHByaXZhdGUgX3BlbmRpbmdSZXF1ZXN0cyA9IDA7XG4gICAgcHJpdmF0ZSBfcGVuZGluZ1JlcXVlc3RzU3RhdHVzOiBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG4gICAgcHJpdmF0ZSBfZmlsdGVyZWRVcmxQYXR0ZXJuczogUmVnRXhwW10gPSBbXTtcbiAgICBwcml2YXRlIF9mb3JjZUJ5UGFzczogYm9vbGVhbjtcblxuICAgIGdldCBwZW5kaW5nUmVxdWVzdHNTdGF0dXMoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZW5kaW5nUmVxdWVzdHNTdGF0dXMuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgZ2V0IHBlbmRpbmdSZXF1ZXN0cygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGVuZGluZ1JlcXVlc3RzO1xuICAgIH1cblxuICAgIGdldCBmaWx0ZXJlZFVybFBhdHRlcm5zKCk6IFJlZ0V4cFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmVkVXJsUGF0dGVybnM7XG4gICAgfVxuXG4gICAgc2V0IGZvcmNlQnlQYXNzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2ZvcmNlQnlQYXNzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG91bGRCeXBhc3NVcmwodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmVkVXJsUGF0dGVybnMuc29tZShlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlLnRlc3QodXJsKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgICAgIGNvbnN0IHNob3VsZEJ5cGFzcyA9IHRoaXMuc2hvdWxkQnlwYXNzVXJsKHJlcS51cmxXaXRoUGFyYW1zKSB8fCB0aGlzLl9mb3JjZUJ5UGFzcztcblxuICAgICAgICBpZiAoIXNob3VsZEJ5cGFzcykge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3RzKys7XG5cbiAgICAgICAgICAgIGlmICgxID09PSB0aGlzLl9wZW5kaW5nUmVxdWVzdHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHNTdGF0dXMubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICAgICAgICBtYXAoZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRCeXBhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3RzLS07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHRoaXMuX3BlbmRpbmdSZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3RzU3RhdHVzLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBQZW5kaW5nSW50ZXJjZXB0b3JTZXJ2aWNlSW50ZXJjZXB0b3I6IEV4aXN0aW5nUHJvdmlkZXJbXSA9IFt7XG4gICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgdXNlRXhpc3Rpbmc6IFBlbmRpbmdJbnRlcmNlcHRvclNlcnZpY2UsXG4gICAgbXVsdGk6IHRydWVcbn1dO1xuIl19