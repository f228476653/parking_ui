import { Component, Input } from '@angular/core';
import { merge, timer } from 'rxjs';
import { debounce } from 'rxjs/operators';
import { PendingInterceptorService } from '../../services/pending-interceptor.service';
import { SpinnerVisibilityService } from '../../services/spinner-visibility.service';
import { Spinkit } from '../../spinkits';
export class SpinnerComponent {
    constructor(pendingInterceptorService, spinnerVisibilityService) {
        this.pendingInterceptorService = pendingInterceptorService;
        this.spinnerVisibilityService = spinnerVisibilityService;
        this.Spinkit = Spinkit;
        this.spinner = Spinkit.skCubeGrid;
        this.filteredUrlPatterns = [];
        this.debounceDelay = 0;
        this.entryComponent = null;
        this.subscriptions = merge(this.pendingInterceptorService.pendingRequestsStatus.pipe(debounce(this.handleDebounce.bind(this))), this.spinnerVisibilityService.visibilityObservable)
            .subscribe(this.handleSpinnerVisibility().bind(this));
    }
    ngOnInit() {
        this.nullifySpinnerIfComponentOutletIsDefined();
        if (!(this.filteredUrlPatterns instanceof Array)) {
            throw new TypeError('`filteredUrlPatterns` must be an array.');
        }
        if (!!this.filteredUrlPatterns.length) {
            this.filteredUrlPatterns.forEach(e => {
                this.pendingInterceptorService.filteredUrlPatterns.push(new RegExp(e));
            });
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    nullifySpinnerIfComponentOutletIsDefined() {
        if (null != this.entryComponent) {
            this.spinner = null;
        }
    }
    handleSpinnerVisibility() {
        return v => this.isSpinnerVisible = v;
    }
    handleDebounce(hasPendingRequests) {
        if (hasPendingRequests) {
            return timer(this.debounceDelay);
        }
        return timer(0);
    }
}
SpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'spinner',
                template: `<div id="spinner" *ngIf="isSpinnerVisible">

    <ng-container *ngComponentOutlet="entryComponent"></ng-container>

    <sk-cube-grid
        *ngIf="spinner === Spinkit.skCubeGrid"
        [backgroundColor]="backgroundColor">
    </sk-cube-grid>

    <sk-chasing-dots
        *ngIf="spinner === Spinkit.skChasingDots"
        [backgroundColor]="backgroundColor">
    </sk-chasing-dots>

    <sk-double-bounce
        *ngIf="spinner === Spinkit.skDoubleBounce"
        [backgroundColor]="backgroundColor">
    </sk-double-bounce>

    <sk-rotating-plane
        *ngIf="spinner === Spinkit.skRotatingPlane"
        [backgroundColor]="backgroundColor">
    </sk-rotating-plane>

    <sk-spinner-pulse
        *ngIf="spinner === Spinkit.skSpinnerPulse"
        [backgroundColor]="backgroundColor">
    </sk-spinner-pulse>

    <sk-three-bounce
        *ngIf="spinner === Spinkit.skThreeBounce"
        [backgroundColor]="backgroundColor">
    </sk-three-bounce>

    <sk-wandering-cubes
        *ngIf="spinner === Spinkit.skWanderingCubes"
        [backgroundColor]="backgroundColor">
    </sk-wandering-cubes>

    <sk-wave
        *ngIf="spinner === Spinkit.skWave"
        [backgroundColor]="backgroundColor">
    </sk-wave>

</div>

`,
                styles: [`#spinner{top:0;left:0;height:100%;width:100%;position:fixed;z-index:9999;opacity:.7;background-color:#f1f1f1;display:flex;align-items:center;justify-content:center}::ng-deep .colored-parent,::ng-deep .colored>div{background-color:#333}`]
            },] },
];
SpinnerComponent.ctorParameters = () => [
    { type: PendingInterceptorService, },
    { type: SpinnerVisibilityService, },
];
SpinnerComponent.propDecorators = {
    "backgroundColor": [{ type: Input },],
    "spinner": [{ type: Input },],
    "filteredUrlPatterns": [{ type: Input },],
    "debounceDelay": [{ type: Input },],
    "entryComponent": [{ type: Input },],
};
function SpinnerComponent_tsickle_Closure_declarations() {
    SpinnerComponent.decorators;
    SpinnerComponent.ctorParameters;
    SpinnerComponent.propDecorators;
    SpinnerComponent.prototype.isSpinnerVisible;
    SpinnerComponent.prototype.subscriptions;
    SpinnerComponent.prototype.Spinkit;
    SpinnerComponent.prototype.backgroundColor;
    SpinnerComponent.prototype.spinner;
    SpinnerComponent.prototype.filteredUrlPatterns;
    SpinnerComponent.prototype.debounceDelay;
    SpinnerComponent.prototype.entryComponent;
    SpinnerComponent.prototype.pendingInterceptorService;
    SpinnerComponent.prototype.spinnerVisibilityService;
}

//# sourceMappingURL=data:application/json;base64,